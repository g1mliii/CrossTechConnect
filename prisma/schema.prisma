// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users and Authentication
model User {
  id               String   @id @default(cuid())
  email            String   @unique
  passwordHash     String   @map("password_hash")
  displayName      String?  @map("display_name") @db.VarChar(100)
  reputationScore  Int      @default(0) @map("reputation_score")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  userDevices         UserDevice[]
  createdDevices      Device[]
  verificationVotes   VerificationVote[]
  createdSchemas      DeviceCategorySchema[]
  searchTracking      SearchTracking[]
  adminAuditLogs      AdminAuditLog[]

  @@map("users")
}

// Device Categories
model DeviceCategory {
  id         String            @id @default(cuid())
  name       String            @db.VarChar(100)
  parentId   String?           @map("parent_id")
  attributes Json?             // Category-specific attributes
  
  // Relations
  parent              DeviceCategory?        @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children            DeviceCategory[]       @relation("CategoryHierarchy")
  devices             Device[]
  schemas             DeviceCategorySchema[]
  deviceSpecifications DeviceSpecification[]
  schemaMigrations    SchemaMigration[]
  dynamicIndexes      DynamicIndex[]
  searchTracking      SearchTracking[]

  @@map("device_categories")
}

// Technical Standards
model Standard {
  id             String   @id @default(cuid())
  name           String   @db.VarChar(100) // e.g., "HDMI 2.1", "USB-C PD"
  category       String   @db.VarChar(50)  // e.g., "video", "power", "data"
  version        String?  @db.VarChar(20)
  specifications Json?    // Technical specs like bandwidth, power delivery
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  deviceStandards     DeviceStandard[]
  compatibilityRulesA CompatibilityRule[] @relation("StandardA")
  compatibilityRulesB CompatibilityRule[] @relation("StandardB")

  @@map("standards")
}

// Main Device Catalog
model Device {
  id                String    @id @default(cuid())
  name              String    @db.VarChar(255)
  brand             String    @db.VarChar(100)
  model             String?   @db.VarChar(100)
  categoryId        String    @map("category_id")
  
  // Physical Specifications
  widthCm           Decimal?  @map("width_cm") @db.Decimal(6,2)
  heightCm          Decimal?  @map("height_cm") @db.Decimal(6,2)
  depthCm           Decimal?  @map("depth_cm") @db.Decimal(6,2)
  weightKg          Decimal?  @map("weight_kg") @db.Decimal(6,3)
  
  // Power and Performance
  powerWatts        Int?      @map("power_watts")
  powerType         String?   @map("power_type") @db.VarChar(50) // AC, DC, Battery, etc.
  
  // Documentation
  manualUrl         String?   @map("manual_url")
  imageUrls         String[]  @map("image_urls")
  description       String?
  
  // Data Quality
  verified          Boolean   @default(false)
  confidenceScore   Decimal   @default(0.0) @map("confidence_score") @db.Decimal(3,2)
  sourceUrl         String?   @map("source_url")
  extractionMethod  String?   @map("extraction_method") @db.VarChar(50) // manual, ai_pdf, ai_scrape, crowdsource
  
  // Metadata
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  createdById       String?   @map("created_by")

  // Relations
  category              DeviceCategory       @relation(fields: [categoryId], references: [id])
  createdBy             User?                @relation(fields: [createdById], references: [id])
  deviceStandards       DeviceStandard[]
  userDevices           UserDevice[]
  verificationItems     VerificationItem[]
  deviceSpecification   DeviceSpecification?
  sourceCompatibilities CompatibilityResult[] @relation("SourceCompatibility")
  targetCompatibilities CompatibilityResult[] @relation("TargetCompatibility")

  @@index([categoryId])
  @@index([brand])
  @@index([widthCm, heightCm, depthCm])
  @@index([powerWatts])
  @@index([verified])
  @@map("devices")
}

// Device-Standards Relationships
model DeviceStandard {
  id         String   @id @default(cuid())
  deviceId   String   @map("device_id")
  standardId String   @map("standard_id")
  portCount  Int      @default(1) @map("port_count")
  notes      String?
  verified   Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  device   Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  standard Standard @relation(fields: [standardId], references: [id])

  @@index([deviceId])
  @@index([standardId])
  @@map("device_standards")
}

// Compatibility Rules
model CompatibilityRule {
  id                 String   @id @default(cuid())
  standardAId        String   @map("standard_a_id")
  standardBId        String   @map("standard_b_id")
  compatibilityType  String   @map("compatibility_type") @db.VarChar(20) // full, partial, none
  description        String?
  limitations        String[] 
  createdAt          DateTime @default(now()) @map("created_at")

  // Relations
  standardA Standard @relation("StandardA", fields: [standardAId], references: [id])
  standardB Standard @relation("StandardB", fields: [standardBId], references: [id])

  @@map("compatibility_rules")
}

// User Device Libraries
model UserDevice {
  id           String    @id @default(cuid())
  userId       String    @map("user_id")
  deviceId     String    @map("device_id")
  nickname     String?   @db.VarChar(100)
  notes        String?
  purchaseDate DateTime? @map("purchase_date") @db.Date
  addedAt      DateTime  @default(now()) @map("added_at")

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  device Device @relation(fields: [deviceId], references: [id])

  @@index([userId])
  @@map("user_devices")
}

// Verification Queue and History
model VerificationItem {
  id              String   @id @default(cuid())
  deviceId        String   @map("device_id")
  fieldName       String   @map("field_name") @db.VarChar(100)
  currentValue    String?  @map("current_value")
  proposedValue   String?  @map("proposed_value")
  sourceType      String?  @map("source_type") @db.VarChar(50) // ai_extraction, user_submission
  confidenceScore Decimal? @map("confidence_score") @db.Decimal(3,2)
  status          String   @default("pending") @db.VarChar(20) // pending, approved, rejected
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  device            Device             @relation(fields: [deviceId], references: [id])
  verificationVotes VerificationVote[]

  @@map("verification_items")
}

model VerificationVote {
  id                   String   @id @default(cuid())
  verificationItemId   String   @map("verification_item_id")
  userId               String   @map("user_id")
  vote                 String   @db.VarChar(10) // approve, reject, modify
  suggestedValue       String?  @map("suggested_value")
  comment              String?
  createdAt            DateTime @default(now()) @map("created_at")

  // Relations
  verificationItem VerificationItem @relation(fields: [verificationItemId], references: [id])
  user             User             @relation(fields: [userId], references: [id])

  @@map("verification_votes")
}

// Extensible Schema System Models

// Device Category Schemas - Defines the structure and validation rules for device categories
model DeviceCategorySchema {
  id                  String   @id @default(cuid())
  categoryId          String   @map("category_id")
  version             String   @db.VarChar(20)
  name                String   @db.VarChar(100)
  description         String?
  parentId            String?  @map("parent_id")
  fields              Json     // Field definitions with types, constraints, and metadata
  requiredFields      String[] @map("required_fields")
  inheritedFields     String[] @map("inherited_fields")
  computedFields      Json?    @map("computed_fields")
  validationRules     Json?    @map("validation_rules")
  compatibilityRules  Json?    @map("compatibility_rules")
  deprecated          Boolean  @default(false)
  deprecationMessage  String?  @map("deprecation_message")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  createdBy           String   @map("created_by")

  // Relations
  category            DeviceCategory        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  parent              DeviceCategorySchema? @relation("SchemaInheritance", fields: [parentId], references: [id])
  children            DeviceCategorySchema[] @relation("SchemaInheritance")
  creator             User                  @relation(fields: [createdBy], references: [id])
  deviceSpecifications DeviceSpecification[]
  schemaMigrations    SchemaMigration[]

  @@unique([categoryId, version])
  @@index([categoryId])
  @@index([version])
  @@index([parentId])
  @@map("device_category_schemas")
}

// Device Specifications - Stores actual device specification data according to schema
model DeviceSpecification {
  id                   String   @id @default(cuid())
  deviceId             String   @unique @map("device_id")
  categoryId           String   @map("category_id")
  schemaVersion        String   @map("schema_version") @db.VarChar(20)
  specifications       Json     // Actual specification values
  computedValues       Json?    @map("computed_values")
  validationErrors     Json?    @map("validation_errors")
  confidenceScores     Json?    @map("confidence_scores")
  sources              Json?    // Source URLs/references for each field
  verificationStatus   Json?    @map("verification_status")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relations
  device               Device               @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  category             DeviceCategory       @relation(fields: [categoryId], references: [id])
  schema               DeviceCategorySchema @relation(fields: [categoryId, schemaVersion], references: [categoryId, version])

  @@index([deviceId])
  @@index([categoryId])
  @@index([schemaVersion])
  @@map("device_specifications")
}

// Schema Migrations - Tracks changes between schema versions
model SchemaMigration {
  id          String    @id @default(cuid())
  categoryId  String    @map("category_id")
  fromVersion String    @map("from_version") @db.VarChar(20)
  toVersion   String    @map("to_version") @db.VarChar(20)
  operations  Json      // Migration operations to apply
  createdAt   DateTime  @default(now()) @map("created_at")
  appliedAt   DateTime? @map("applied_at")

  // Relations
  category    DeviceCategory       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  schema      DeviceCategorySchema @relation(fields: [categoryId, toVersion], references: [categoryId, version])

  @@index([categoryId])
  @@index([fromVersion])
  @@index([toVersion])
  @@map("schema_migrations")
}

// Category Templates - Predefined templates for creating new device categories
model CategoryTemplate {
  id             String   @id @default(cuid())
  name           String   @db.VarChar(100)
  description    String
  baseSchema     Json     @map("base_schema")
  exampleDevices String[] @map("example_devices")
  tags           String[]
  popularity     Int      @default(0)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@index([tags], type: Gin)
  @@index([popularity])
  @@map("category_templates")
}

// Dynamic Indexes - Tracks dynamically created database indexes for schema fields
model DynamicIndex {
  id               String   @id @default(cuid())
  categoryId       String   @map("category_id")
  fieldName        String   @map("field_name") @db.VarChar(100)
  indexType        String   @map("index_type") @db.VarChar(20) // btree, gin, gist, hash
  indexName        String   @map("index_name") @db.VarChar(100)
  uniqueConstraint Boolean  @default(false) @map("unique_constraint")
  partialCondition String?  @map("partial_condition")
  expression       String?  // For expression indexes
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  category         DeviceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, fieldName])
  @@index([categoryId])
  @@index([fieldName])
  @@map("dynamic_indexes")
}

// Compatibility Results - Cached compatibility analysis results
model CompatibilityResult {
  id                   String    @id @default(cuid())
  sourceDeviceId       String    @map("source_device_id")
  targetDeviceId       String    @map("target_device_id")
  compatibilityType    String    @map("compatibility_type") @db.VarChar(20) // full, partial, none
  confidence           Decimal   @db.Decimal(3,2)
  details              String
  limitations          String[]
  recommendations      String[]
  matchedRules         String[]  @map("matched_rules")
  fieldCompatibility   Json?     @map("field_compatibility")
  context              Json?     // Additional context used for compatibility check
  createdAt            DateTime  @default(now()) @map("created_at")
  expiresAt            DateTime? @map("expires_at")

  // Relations
  sourceDevice         Device    @relation("SourceCompatibility", fields: [sourceDeviceId], references: [id], onDelete: Cascade)
  targetDevice         Device    @relation("TargetCompatibility", fields: [targetDeviceId], references: [id], onDelete: Cascade)

  @@unique([sourceDeviceId, targetDeviceId])
  @@index([sourceDeviceId])
  @@index([targetDeviceId])
  @@index([compatibilityType])
  @@index([expiresAt])
  @@map("compatibility_results")
}

// Search Tracking - Track user searches for analytics
model SearchTracking {
  id           String          @id @default(cuid())
  userId       String?         @map("user_id")
  query        String
  filters      Json?
  resultsCount Int             @default(0) @map("results_count")
  categoryId   String?         @map("category_id")
  createdAt    DateTime        @default(now()) @map("created_at")

  // Relations
  user         User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  category     DeviceCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([categoryId])
  @@index([createdAt])
  @@map("search_tracking")
}

// User Activity - Track user actions for analytics
model UserActivity {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  activityType String   @map("activity_type") @db.VarChar(50)
  entityType   String?  @map("entity_type") @db.VarChar(50)
  entityId     String?  @map("entity_id")
  metadata     Json?
  ipAddress    String?  @map("ip_address") @db.VarChar(45)
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([activityType])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("user_activity")
}

// Admin Audit Log - Track admin actions for compliance
model AdminAuditLog {
  id           String   @id @default(cuid())
  adminId      String   @map("admin_id")
  action       String   @db.VarChar(100)
  entityType   String   @map("entity_type") @db.VarChar(50)
  entityId     String   @map("entity_id")
  changes      Json?
  ipAddress    String?  @map("ip_address") @db.VarChar(45)
  userAgent    String?  @map("user_agent")
  success      Boolean  @default(true)
  errorMessage String?  @map("error_message")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  admin        User     @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
  @@index([action])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("admin_audit_log")
}

// Performance Metrics - Track system performance
model PerformanceMetric {
  id         String   @id @default(cuid())
  metricType String   @map("metric_type") @db.VarChar(50)
  metricName String   @map("metric_name") @db.VarChar(100)
  value      Decimal  @db.Decimal(10,2)
  unit       String?  @db.VarChar(20)
  metadata   Json?
  createdAt  DateTime @default(now()) @map("created_at")

  @@index([metricType])
  @@index([metricName])
  @@index([createdAt])
  @@map("performance_metrics")
}
